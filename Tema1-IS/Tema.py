
init_string = "123456789Andreea"
plaintext = "It was my second day on the job. "
key = '01101001011011000110111101110110011001010111100101101111011101010110100101101100011011110111011001100101011110010110111101110101'


_xormap = {('0', '1'): '1', ('1', '0'): '1', ('1', '1'): '0', ('0', '0'): '0'}
def xor(x, y):
    return ''.join([_xormap[a, b] for a, b in zip(x, y)])

def init_iv(init_string):
    iv = ""
    for char in init_string:
        aux = format(ord(char),'b')
        while len(aux) != 8:
            aux = '0' + aux
        iv+=aux
    return iv

iv = init_iv(init_string)


def bin_to_char(text):
    list_num = []
    sstr = ""
    for char_128 in text:
        while char_128 !="":
            #print("char_8: ", char_128[:8])
            list_num.append(int(char_128[:8],2))
            #print("char_128: ", char_128)
            char_128 = char_128[8:]
    for num in list_num:
        sstr+=chr(num)
    return sstr

def divide_plaintext(plaintext):
    list = []
    list_aux = []
    num = 0
    for char in plaintext:
        list_aux.append(ord(char))
        num += 1
        if num == 16:
            num = 0
            list.append(list_aux)
            list_aux = []
    if num!=0:
        for i in range(num,16):
            list_aux.append(ord(" "))
        list.append(list_aux)
    return list

def divided_plaintext_to_binary(text):
    bin_list = []
    for list in text:
        char_128 = ""
        for char in list:
            char_8 = (format(char,'b'))
            while len(char_8) != 8:
                char_8='0' + char_8
            char_128 += char_8
        bin_list.append(char_128)
        char_128 = ""
    return bin_list

def CBC(key,init_iv,plaintext):

    divided_plaintext = divide_plaintext(plaintext)                #"""divide the plaintext in 8 characters"""
    bin_plaintxt = divided_plaintext_to_binary(divided_plaintext)  #"""turns the 8 characters in bits"""
    char_128 = bin_plaintxt[0]                                                      #"""takes the first 8 sets of bits and XORes them with iv and encryptes them with a key """
    #print("plaintx: ", bin_plaintxt)
    #print("char_128: ", char_128)
    #print("init_iv: ", init_iv)
    xor1 = xor(char_128,init_iv)
    #print("xor1: ", xor1)
    #print("key: ", key)
    cyper = xor(xor1,key)
    #print("new_cyper: ", cyper)                                                         #"""adding the cypher to a list and poping the first elemenet from the plaintext(the first 8 chars)"""
    cyper_list = [cyper]
    bin_plaintxt.pop(0)
    #print("bin_plaintxt: ", bin_plaintxt)

    for char_128 in bin_plaintxt:
        #print("char_128: ", char_128)
        #print("old_cyper: ", cyper)
        xor1 = xor(char_128,cyper)
        #print("xor1: ", xor1)
        #print("key: ", key)
        cyper = xor(xor1, key)
        #print("new_cyper: ", cyper)
        cyper_list.append(cyper)

    #print("cyper_list: ", cyper_list)
    return cyper_list

""" CBC + decr_CBC return a list each """

def decr_CBC(key,iv,cyper_list):
    cyper_128 = cyper_list.pop(0)
    #print("cyper_128: ",cyper_128)
    #print("key: ", key)
    xor1 = xor(cyper_128,key)
    #print("xor1: ", xor1)
    #print("iv: ", iv)
    plain_txt = xor(xor1,iv)
    #print("new_plain_txt: ", plain_txt)
    plain_list = [plain_txt]
    #cyper_list.pop(0)
    prev_cyper_128 = cyper_128
    #print("prev_cyper_128: ",prev_cyper_128)

    for cyper_128 in cyper_list:
        #print("cyper_128: ", cyper_128)
        #print("key: ", key)
        xor1 = xor(cyper_128,key)
        #print("xor1: ", xor1)
        #print("prev_cyper_128: ", prev_cyper_128)
        plain_txt = xor(xor1, prev_cyper_128)
        #print("new_plain_txt: ", plain_txt)
        prev_cyper_128 = cyper_128
        plain_list.append(plain_txt)

    return plain_list


"""encryption = CBC(key,iv,plaintext)
print("encryption: ", encryption)
decryption = decr_CBC(key,iv,encryption)
print("decryption: ", decryption)


print(bin_to_char(encryption))
print(bin_to_char(decryption))"""

def OFB(key,init_iv,plaintext):

    divided_plaintext = divide_plaintext(plaintext)                #divide the plaintext in 8 characters
    bin_plaintxt = divided_plaintext_to_binary(divided_plaintext)  #turns the 8 characters in bits
    char_128 = bin_plaintxt.pop(0)                                                    #takes the first 8 sets of bits and XORes them with iv and encryptes them with a key
    #print("plaintx: ", bin_plaintxt)
   # print("key: ", key)
   # print("init_iv: ", init_iv)
    xor1 = xor(key,init_iv)
   #print("xor1: ", xor1)
    #print("char_128: ", char_128)
    cyper = xor(xor1,char_128)
   # print("new_cyper: ", cyper)                                                         #adding the cypher to a list and poping the first elemenet from the plaintext(the first 8 chars)
    cyper_list = [cyper]
   #print("bin_plaintxt: ", bin_plaintxt)

    for char_128 in bin_plaintxt:
        #print("key: ", key)
        #print("old_xor1: ", xor1)
        xor1 = xor(key, xor1)
        #print("xor1: ", xor1)
        #print("char_128: ", char_128)
        cyper = xor(xor1, char_128)
        #print("new_cyper: ", cyper)
        cyper_list.append(cyper)

    #print("cyper_list: ", cyper_list)
    return cyper_list

def decr_OFB(key,iv,cyper_list):
    cyper_128 = cyper_list.pop(0)
    #print("iv: ", iv)
    #print("key: ", key)
    xor1 = xor(iv,key)
    #print("xor1: ", xor1)
   # print("cyper_128: ", cyper_128)
    plain_txt = xor(xor1,cyper_128)
    #print("new_plain_txt: ", plain_txt)
    plain_list = [plain_txt]
    prev_xor = xor1

    for cyper_128 in cyper_list:
        #print("cyper_128:", cyper_128)
        #print("key: ", key)
       # print("old_xor1 ", xor1)
        xor1 = xor(key, xor1)
        #print("xor1: ", xor1)
        #print("cyper_128: ", cyper_128)
        plain_txt = xor(xor1, cyper_128)
        #print("new_plain_txt: ", plain_txt)
        plain_list.append(plain_txt)

    return plain_list

"""encryption1 = OFB(key,iv,plaintext)
print("encryption: ", encryption1)
decryption1 = decr_OFB(key,iv,encryption1)
print("decryption: ", decryption1)


print("enc_OFB: ", bin_to_char(encryption1))
print("decr_OFB: ", bin_to_char(decryption1))

"""

def char_to_bin(text):
    str_bin = ""
    for char in text:
        aux = format(ord(char), 'b')
        while len(aux)!=8:
            aux= '0' + aux
        str_bin += aux
    return str_bin

#print(char_to_bin("/O+DgHDQPVoVCGfF"))

list
k = '01011001011010000100110001001100010000100111100001000110011001010011011000110100011011010111010100101011011000100110111100110100'
iv = '00110001001100100011001100110100001101010011011000110111001110000011100101000001011011100110010001110010011001010110010101100001'
#print((bin_to_char(decr_CBC(k,iv,list))))